package com.cruddemo.entities;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity //Entity class is a Special class, these classes are mapped to the table of DB. Moment we write @Entity Spring Boot will automatically based on the name will search for the table in the DB & connect with that, Thats why we should give the same table name as in DB. & Spring boot automatically does the work of mapping.
//It'll automatically do it, that's y we have given the name same, u apply this annotation and it will make this an entity class which means this class is mapped to the DB table, but how is this getting mapped, bcs the table name and the class name r same.
public class Student {//Now we need to have the variables matching to the DB table..  
	@Id
	private int id;
	private String name;
	private String course;
	private int fee;
	//& Now this is where we are achieving Encapsulation here. This is where in our project encapsulation is used. Now select Getters & Setters and click on generate.
	//In interviews they ask where have u used Encapsulation in your project? => We have used encapsulation in a project while creating Entity Classes.
	//Now as per our table in DB ID is the primary key so that we are writing @id above String ID.
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCourse() {
		return course;
	}
	public void setCourse(String course) {
		this.course = course;
	}
	public int getFee() {
		return fee;
	}
	public void setFee(int fee) {
		this.fee = fee;
	}

	
}
